<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd">
    <metadata>
        <id>CodeOnlyStoredProcedures</id>
        <version>0.0.0</version> <!-- Will be set during package creation in appveyor -->
        <title>Code Only Stored Proecedures</title>
        <authors>Abraham Heidebrecht</authors>
        <projectUrl>https://github.com/abe545/CodeOnlyStoredProcedures</projectUrl>
        <requireLicenseAcceptance>false</requireLicenseAcceptance>
        <description>A library for easily calling Stored Procedures in .NET. Works great with Entity Framework Code First models. 
Code Only Stored Procedures will not create any Stored Procedures on your database. Instead, its aim is to make it easy to call your existing stored procedures by writing simple code.</description>
        <releaseNotes>2.3.0
Fixed bug where hierarchical result sets could not be marked as optional
Hierarchies are now much faster to build, especially with large data sets.
DateTimeOffset is now fully supported (in the past you had to use attributes or the Fluent syntax to specify the DbType).
Hierarchical result sets will now match using case-insensitive names if the case-sensitive ones aren't found.
     
2.2.6
Fixed bug where dynamic stored procedures wouldn't dispose of the IDbCommand objects they created.
Fixed bug where empty Table Valued Parameters could not be passed.

2.2.5
Fixed bug where a dynamic stored procedure wouldn't dispose its database connection if the stored procedure threw an exception.
Fixed bug in the dynamic syntax where asynchronous execution of a stored procedure that has no results would not throw exceptions from sql server.
Fixed bug where StoredProcedure&lt;dynamic&gt; (both syntaxes) would return DBNull values instead of null.
Fixed bug where WithInputOutputParameter and WithOutputParameter would not infer DBType when not passed explicitly
Fixed bug where symbols were not available for .Net 4.0 projects
Fixed bug where custom structs could not be passed as input parameters to the dynamic syntax
Fixed bug where enums were being sent as object. Will now send as string

2.2.4
Fixed bug where calling ToString on a stored procedure could print parameters with a double @.
Fixed bug where the fluent syntax would not infer the type of its parameters from the compile time generic parameter type.

2.2.3
Fixed bug where dynamic stored procedures wouldn't close their connections.

2.2.2
Fixed bug where null values could not be passed in the dynamic syntax.
Fixed bug where TableValuedParameters would attempt to pass set only properties, resulting in an exception.
Fixed bug where an exception would be thrown when using a mapped interface, if that interface had an IEnumerable property that was
not mapped in the implementing class.

2.2.1
Fixed bug where Timespan and DateTimeOffset result columns would throw an exception.

2.2.0
Added ability to pass Table Valued Parameters in the dynamic syntax, and as a property via WithInput, without decorating the class with the TableValuedParameterAttribute. It will use the class name as the TableName, and dbo as the Schema.
Added ability to return single rows from dynamic stored procedures in one line, so long as the stored procedure returns one or fewer items

2.1.0
Added ability to specify the order in which multiple result sets are returned for hierarchical models.
Added global data transformers, that will be applied for all columns in all stored procedures. These should be specified before any StoredProcedure is created.
Added option to enable numeric conversions for all numeric properties. This should be specified before any StoredProcedure is created.
Fixed bug where System.Single (float in C#) property types could not be returned (it would throw an exception).
Fixed bug where StoredProcedure&lt;dynamic&gt; would not apply any IDataTransformers specified.
Fixed bug where expected columns that don't get returned were throwing an IndexOutOfRangeException instead of a StoredProcedureResultsException
          
2.0.0
Removed dependency on SQL Server for all stored procedures (except those that accept Table Valued Parameters)
Results from the dynamic syntax can now be cast explicitly
Result columns can be marked as optional, so if no value is returned, the execution will not fail.
Stored Procedures can return dynamic (which will be an ExpandoObject, with all colums returned by the stored procedure as properties).
Stored Procedures that return hierarchical objects as multiple result sets can now have their relationships automatically discovered
Performance improvements

1.3.1
Fixed bug where none of the named properties of StoredProcedureParameterAttribute could be set on an object, because they were nullable.
Fixed bug where calling a stored procedure that returns results asynchronously could block the calling thread.

1.3.0
Added StoredProcedure.Execute and StoredProcedure.ExecuteAsync methods to more explicitly control dynamic stored procedures.
Added ability to specify an implementation of an interface, so a StoredProcedure can return an IEnumerable&lt;interface&gt;

1.2.1
Added better exception when a model is missing a public parameterless constructor.</releaseNotes>
        <tags>StoredProcedure ORM Code Only</tags>
        <dependencies>
            <group targetFramework=".NETFramework4.0">
                <dependency id="EntityFramework" version="6.1.3" />
            </group>
            <group targetFramework=".NETFramework4.5" />
        </dependencies>
        <references>
            <reference file="CodeOnlyStoredProcedure.dll" />
        </references>
    </metadata>
    <files>
      <file src="CodeOnlyStoredProcedure\Bin\Release\**\CodeOnlyStoredProcedure*" exclude="**\*.old" target="lib\net45" />
      <file src="CodeOnlyStoredProcedure-NET40\Bin\Release\**\CodeOnlyStoredProcedure*" exclude="**\*.old" target="lib\net40" />
      <file src="**\*.cs" exclude="*Test*\**\*;CodeOnlyStoredProcedure*\obj\**\*" target="src" />
    </files>
</package>
