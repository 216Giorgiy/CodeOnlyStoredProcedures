<#+
public class StoredProcedureExtensionsWithResultsTemplate : Template
{
	public int TypeCount;

	private void GetTypes(int count)
	{
		if (count == 0) return;

		Write("<");
		for (int i = 1; i <= count; ++i)
		{
			if (i > 1)
				Write(", ");
			Write("T" + i);
		}
		Write(">");
	}

	public void WriteTypeParams()
    {
        for (int i = 1; i <= TypeCount; i++)
        {
			if (i > 1)
				Write("\t\t");
			Write("/// <typeparam name=\"T" + i + "\">The type of the " + GetOrdinal(i) + " result set returned by the stored procedure.</typeparam>\n");
        }
    }

	public string GetOrdinal(int i)
    {
        switch (i)
        {
			case 1:
				return "first";

			case 2:
				return "second";

			case 3:
				return "third";

			case 4:
				return "fourth";

			case 5:
				return "fifth";

			case 6:
				return "sixth";

			case 7:
				return "seventh";

			default:
				return i + "th";
        }
    }

	public override string TransformText()
	{
#>

		/// <summary>Clones the given <see cref="StoredProcedure" /> into one that returns the given results.</summary>
		<#+ WriteTypeParams(); #>
		/// <param name="sp">The <see cref="StoredProcedure" /> to clone.</param>
		/// <returns>A copy of the <see cref="StoredProcedure" />, but that will return the given results.</returns>
        /// <remarks>StoredProcedures are immutable, so all the Fluent API methods return copies.</remarks>
		<#+ if (TypeCount == 1) WriteLine("/// <example>\n\t\t/// <code language=\"cs\">\n\t\t/// var sp = StoredProcedure.Create(\"usp_getPeople\").WithResults&lt;Person&gt;();\n\t\t/// </code>\n\t\t/// </example>"); #>
		public static StoredProcedure<#+ GetTypes(TypeCount); #> WithResults<#+ GetTypes(TypeCount); #>(this StoredProcedure sp)
		{
            Contract.Requires(sp != null);
			Contract.Requires(sp.GetType() == typeof(StoredProcedure));
			Contract.Ensures(Contract.Result<StoredProcedure<#+ GetTypes(TypeCount); #>>() != null);

			return new StoredProcedure<#+ GetTypes(TypeCount); #>(sp);
		}

<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
