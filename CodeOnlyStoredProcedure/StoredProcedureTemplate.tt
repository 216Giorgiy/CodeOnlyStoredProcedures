<#+
public class StoredProcedureTemplate : Template
{
	public int TypeCount;

	private void GetTypes(int count)
	{
		if (count == 0) return;

		Write("<");
		for (int i = 1; i <= count; ++i)
		{
			if (i > 1)
				Write(", ");
			Write("T" + i);
		}
		Write(">");
	}

	private void CreateCachedFields()
	{
		PushIndent("\t\t");
		for (int i = 1; i <= TypeCount; ++i)
			WriteLine("private static readonly Type t" + i + " = typeof(T" + i + ");");
		PopIndent();
	}

	private void GetResults(bool isInXml = false)
	{
		if (TypeCount > 1)
        {			
			Write("Tuple");
			WriteOpen(isInXml);
        }

		for (int i = 1; i <= TypeCount; ++i)
		{
			if (i > 1)
				Write(", ");

			Write("IEnumerable");
			WriteOpen(isInXml);
			Write("T" + i);
			WriteClose(isInXml);
		}

		if (TypeCount > 1)
			WriteClose(isInXml);
	}

	private void WriteOpen(bool isInXml)
    {
		Write(isInXml ? "&lt;" : "<");
    }

	private void WriteClose(bool isInXml)
    {
		Write(isInXml ? "&gt;" : ">");
    }

	public void GetCachedFields()
	{
		for (int i = 1; i <= TypeCount; ++i)
		{
			if (i > 1)
				Write(", ");
			Write("t" + i);
		}
	}

	public void ParseResults()
	{
		if (TypeCount > 1)
			Write("Tuple.Create(");

		for (int i = 1; i <= TypeCount; ++i)
		{
			if (i > 1)
				Write(", ");

			Write("(IEnumerable<T" + i + ">)results[t" + i + "]");
		}

		if (TypeCount > 1)
			Write(")");

		Write(";");
	}

	public void WriteTypeParams()
    {
        for (int i = 1; i <= TypeCount; i++)
        {
			if (i > 1)
				Write("\t");
			Write("/// <typeparam name=\"T" + i + "\">The type of the " + GetOrdinal(i) + " result set returned by the stored procedure.</typeparam>\n");
        }
    }

	public string GetOrdinal(int i)
    {
        switch (i)
        {
			case 1:
				return "first";

			case 2:
				return "second";

			case 3:
				return "third";

			case 4:
				return "fourth";

			case 5:
				return "fifth";

			case 6:
				return "sixth";

			case 7:
				return "seventh";

			default:
				return i + "th";
        }
    }

    public override string TransformText()
    {
#>
	#region StoredProcedure<#+ GetTypes(TypeCount); #>

	/// <summary>Calls a StoredProcedure that returns <#+ Write(TypeCount.ToString()); #> result set(s).</summary>
	<#+ WriteTypeParams(); #>
	public class StoredProcedure<#+ GetTypes(TypeCount); #> : StoredProcedure<#+ GetTypes(TypeCount - 1); #>

	{
<#+ CreateCachedFields(); #>

        /// <summary>
        /// Creates a <see cref="StoredProcedure"/> with the given <paramref name="name"/>
        /// in the dbo schema.
        /// </summary>
        /// <param name="name">The name of the stored procedure.</param>
		public StoredProcedure(string name) : base(name)
		{ 
            Contract.Requires(!string.IsNullOrWhiteSpace(name));
		}
		
        /// <summary>
        /// Creates a <see cref="StoredProcedure"/> with the given <paramref name="name"/>
        /// in the <paramref name="schema"/> schema.
        /// </summary>
        /// <param name="schema">The schema of the stored procedure.</param>
        /// <param name="name">The name of the stored procedure.</param>
		public StoredProcedure(string schema, string name) : base(schema, name)
		{ 
            Contract.Requires(!string.IsNullOrWhiteSpace(schema));
            Contract.Requires(!string.IsNullOrWhiteSpace(name));
		}
		
		internal StoredProcedure(StoredProcedure toClone)
			: base(toClone.Schema, toClone.Name, toClone.Parameters, toClone.OutputParameterSetters, toClone.DataTransformers) 
		{ 
			Contract.Requires(toClone != null);
		}
				
#if NET40
        /// <summary>
        /// Creates a <see cref="StoredProcedure"/> with the given <paramref name="name"/>
        /// in the <paramref name="schema"/> schema, with the <see cref="SqlParameter"/>s
        /// to pass, the output action map, and the <see cref="IDataTransformer"/>s to 
        /// use to transform the results.
        /// </summary>
        /// <param name="schema">The schema of the stored procedure.</param>
        /// <param name="name">The name of the stored procedure.</param>
        /// <param name="parameters">The <see cref="SqlParameter"/>s to pass to the stored procedure.</param>
        /// <param name="outputParameterSetters">The map of <see cref="Action{T}"/> to call for output parameters.</param>
        /// <param name="dataTransformers">The <see cref="IDataTransformer"/>s to transform the results.</param>
		protected StoredProcedure(string schema, 
            string name,
            IEnumerable<SqlParameter> parameters,
            IEnumerable<KeyValuePair<string, Action<object>>> outputParameterSetters,
			IEnumerable<IDataTransformer> dataTransformers)
			: base(schema, name, parameters, outputParameterSetters, dataTransformers)
        {
            Contract.Requires(!string.IsNullOrWhiteSpace(schema));
            Contract.Requires(!string.IsNullOrWhiteSpace(name));
			Contract.Requires(parameters != null);
			Contract.Requires(outputParameterSetters != null);
			Contract.Requires(dataTransformers != null);
		}
#else
        /// <summary>
        /// Creates a <see cref="StoredProcedure"/> with the given <paramref name="name"/>
        /// in the <paramref name="schema"/> schema, with the <see cref="SqlParameter"/>s
        /// to pass, the output action map, and the <see cref="IDataTransformer"/>s to 
        /// use to transform the results.
        /// </summary>
        /// <param name="schema">The schema of the stored procedure.</param>
        /// <param name="name">The name of the stored procedure.</param>
        /// <param name="parameters">The <see cref="SqlParameter"/>s to pass to the stored procedure.</param>
        /// <param name="outputParameterSetters">The map of <see cref="Action{T}"/> to call for output parameters.</param>
        /// <param name="dataTransformers">The <see cref="IDataTransformer"/>s to transform the results.</param>
		protected StoredProcedure(string                                      schema,
                                  string                                      name,
                                  ImmutableList<SqlParameter>                 parameters,
                                  ImmutableDictionary<string, Action<object>> outputParameterSetters,
                                  ImmutableList<IDataTransformer>             dataTransformers)
			: base(schema, name, parameters, outputParameterSetters, dataTransformers)
        {
            Contract.Requires(!string.IsNullOrWhiteSpace(schema));
            Contract.Requires(!string.IsNullOrWhiteSpace(name));
            Contract.Requires(parameters             != null);
            Contract.Requires(outputParameterSetters != null);
            Contract.Requires(dataTransformers       != null);
		}
#endif
	
        /// <summary>
        /// Executes the stored procedure.
        /// </summary>
        /// <param name="connection">The connection to use to execute the StoredProcedure.</param>
        /// <param name="timeout">The number of seconds to wait before aborting the 
        /// stored procedure's execution.</param>
		/// <returns>The results from the stored procedure.</returns>
        /// <example>If using from an Entity Framework DbContext, the connection can be passed:
        /// <code language='cs'>
        /// var results = storedProcedure.Execute(this.Database.Connection);
        /// </code>
        /// </example>
		public new <#+ GetResults(); #> Execute(IDbConnection connection, int timeout = defaultTimeout)
		{
			Contract.Requires(connection != null);
			Contract.Ensures(Contract.Result<<#+ GetResults(); #>>() != null);

			var results = Execute(connection, CancellationToken.None, timeout, new[] { <#+ GetCachedFields(); #> });

			return <#+ ParseResults(); #> 
		}
		
        /// <summary>
        /// Executes the StoredProcedure asynchronously.
        /// </summary>
        /// <param name="connection">The connection to use to execute the StoredProcedure.</param>
        /// <param name="timeout">The number of seconds to wait before aborting the 
        /// stored procedure's execution.</param>
        /// <returns>A Task&lt;<#+ GetResults(true); #>&gt; that will be completed when the StoredProcedure is finished executing.</returns>
        /// <example>If using from an Entity Framework DbContext, the connection can be passed:
        /// <code language='cs'>
        /// var results = await storedProcedure.ExecuteAsync(this.Database.Connection);
        /// </code>
        /// </example>
		public new Task<<#+ GetResults(); #>> ExecuteAsync(IDbConnection connection, int timeout = defaultTimeout)
		{
			Contract.Requires(connection != null);
			Contract.Ensures(Contract.Result<Task<<#+ GetResults(); #>>>() != null);

			return ExecuteAsync(connection, CancellationToken.None, timeout);
		}

		
        /// <summary>
        /// Executes the StoredProcedure asynchronously.
        /// </summary>
        /// <param name="connection">The connection to use to execute the StoredProcedure.</param>
        /// <param name="token">The <see cref="CancellationToken"/> to use to cancel the execution of the StoredProcedure.</param>
        /// <param name="timeout">The number of seconds to wait before aborting the 
        /// stored procedure's execution.</param>
        /// <returns>A Task&lt;<#+ GetResults(true); #>&gt; that will be completed when the StoredProcedure is finished executing.</returns>
        /// <example>If using from an Entity Framework DbContext, the connection can be passed:
        /// <code language='cs'>
		/// var cts     = new CancellationTokenSource();
        /// var results = await storedProcedure.ExecuteAsync(this.Database.Connection, cts.Token);
        /// </code>
        /// </example>
		public new Task<<#+ GetResults(); #>> ExecuteAsync(IDbConnection connection, CancellationToken token, int timeout = defaultTimeout)
		{
			Contract.Requires(connection != null);
			Contract.Ensures(Contract.Result<Task<<#+ GetResults(); #>>>() != null);

			return Task.Factory.StartNew(
				() => 
				{
					var results = Execute(connection, token, timeout, new[] { <#+ GetCachedFields(); #> });

					return <#+ ParseResults(); #> 
				}, token);
		}
		
        /// <summary>
        /// Clones the StoredProcedure, and gives it the passed parameters.
        /// </summary>
        /// <param name="parameters">The <see cref="SqlParameter"/>s to pass to the stored procedure.</param>
        /// <param name="outputParameterSetters">The map of <see cref="Action{T}"/> to call for output parameters.</param>
        /// <param name="dataTransformers">The <see cref="IDataTransformer"/>s to transform the results.</param>
        /// <returns>A clone of the stored procedure.</returns>
		protected internal override StoredProcedure CloneCore(
#if NET40
			IEnumerable<SqlParameter>                         parameters,
            IEnumerable<KeyValuePair<string, Action<object>>> outputParameterSetters,
			IEnumerable<IDataTransformer>                     dataTransformers)
#else
            ImmutableList<SqlParameter>                 parameters,
            ImmutableDictionary<string, Action<object>> outputParameterSetters,
            ImmutableList<IDataTransformer>             dataTransformers)
#endif
		{
			return new StoredProcedure<#+ GetTypes(TypeCount); #>(Schema, Name, parameters, outputParameterSetters, dataTransformers);
		}		

        internal override object InternalCall(
            IDbConnection connection,
            int           commandTimeout = defaultTimeout)
        {
            return this.Execute(connection, commandTimeout);
        }

        internal override object InternalCallAsync(
            IDbConnection     connection,
            CancellationToken token,
            int               commandTimeout = defaultTimeout)
        {
            return this.ExecuteAsync(connection, token, commandTimeout);
        }
	}
	#endregion


<#+
        return this.GenerationEnvironment.ToString();
    }
}
#>